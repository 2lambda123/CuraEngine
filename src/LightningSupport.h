//Copyright (c) 2022 Ultimaker B.V.
//CuraEngine is released under the terms of the AGPLv3 or higher.

#ifndef LITESUPPORT_H
#define LITESUPPORT_H

#include "infill/LightningLayer.h"

namespace cura
{
    class Settings;
    class SliceDataStorage;
    class SliceMeshStorage;
    class TreeModelVolumes;

    /*!
     * \brief Generates a 'lightning' structure to support models where needed.
     */
    class LightningSupport
    {
    public:
        /*!
         * \brief Creates an instance of the lightning support generator.
         * \param storage The data storage to get global settings from.
         */
        LightningSupport();

        /*!
         * \brief Create the areas that need support.
         *
         * These areas are stored inside the given SliceDataStorage object.
         * \param storage The data storage where the mesh data is gotten from and where the resulting support areas are stored.
         */
        void generateSupportAreas(SliceDataStorage& storage);

        const LightningLayer& getTreesForLayer(const size_t& layer_id) const;
        const Polygons& getOutlinesForLayer(const size_t& layer_id) const;

    protected:
        void generateTreeVolumes(const SliceDataStorage& storage, const Settings& settings, const size_t max_layer);
        void generateSupportForMesh(SliceMeshStorage& mesh);
        void generateInitialInternalOverhangs(const SliceMeshStorage& mesh);
        void generateTrees(const SliceMeshStorage& mesh);

        /*!
         * How far each piece of infill can support skin in the layer above.
         */
        coord_t supporting_radius;

        /*!
         * How far a wall can support the wall above it. If a wall completely
         * supports the wall above it, no infill needs to support that.
         *
         * This is similar to the overhang distance calculated for support. It is
         * determined by the lightning_infill_overhang_angle setting.
         */
        coord_t wall_supporting_radius;

        /*!
         * How far each piece of infill can support other infill in the layer above.
         *
         * This may be different than \ref supporting_radius, because the infill is
         * printed with one end floating in mid-air. This endpoint will sag more, so
         * an infill line may need to be supported more than a skin line.
         */
        coord_t prune_length;

        /*!
         * How far a line may be shifted in order to straighten the line out.
         *
         * Straightening the line reduces material and time usage and reduces
         * accelerations needed to print the pattern. However it makes the infill
         * weak if lines are partially suspended next to the line on the previous
         * layer.
         */
        coord_t straightening_max_distance;

        /*!
         * For each layer, the overhang that needs to be supported by the pattern.
         *
         * This is generated by \ref generateInitialInternalOverhangs.
         */
        std::vector<Polygons> overhang_per_layer;

        // TODO: document
        std::vector<Polygons> infill_outlines;

        // TODO: document
        std::vector<Polygons> discourage_root_areas;

        // TODO: document
        //std::shared_ptr<TreeModelVolumes> tree_model_volumes;
        coord_t avoid_bp_extra_dist;
        std::vector<Polygons> avoidance_envelope;

        /*!
         * For each layer, the generated lightning paths.
         *
         * This is generated by \ref generateTrees.
         */
        std::vector<LightningLayer> lightning_layers;
    }; // class LightningSupport

} // namespace cura

#endif //LITESUPPORT_H
